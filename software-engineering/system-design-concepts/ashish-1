 -- What is API ? --
API types -
1. Public APIs
2. Private APIs
3. Interfaces

API resources - 
    Postman, 
    Google
    RapidAPI

NOTE : Python sort() or upper() are also considered as API (i.e. interface APIs)
    while we usually think webAPIs as API.

-- What are API Gateways ? --

An API Gateway is a central server that sits between clients(browser/mobile apps)
and backend services.

Instead of clients directly interacting with multiple microservices directly,
they send their requests to API Gateway. 
The gateway processes these requests, enforces security, and forwards them to 
the appropriate microservices.

1. Why do we need an API Gateway??

    Modern applications, especially those built using microservices architecture, 
    have multiple backend services managing different functionalities.

For example, in an e-commerce service:
* One service handles user accounts.
* Another handles payments.
* Another manages product inventory.

:: Without an API Gateway :

    |--------> Account Service
Client ------> Inventory service
    | -------> Payments service

* Clients would need to know the location and details of all 
    backend services.
* Developers would need to manage authentication, rate limiting, 
    and security for each service individually.

:: With an API Gateway :

                |--------> Account Service
Client---> API Gateway  ------> Inventory service
                | -------> Payments service

* Client send all request to one place - the API Gateway.
* The API Gateway takes care of all the tasks -
    - Routing
    - Authentication
    - Security and other operational tasks

:: Core features of an API Gateway :
- Authentication/Authorization
- Rate Limiting
- Load Balancing
- Caching
- Request Transformation
- Service Discovery
- Circuit Breaking
- Monitoring Logging

1. Authentication & Authorization :
- Authentication : Verifying the identity of the client using tokens
    - OAuth
    - JWT
    - API Keys
    - Certificates
- Authorization : Checking client's permissions to access specific services
    or resources.

2. Rate Limiting : 
    To prevent and ensure fair usage of resources, most API Gateways 
    implement rate limiting.
 
* Controls the frequency of requests a client can make within a given timeframe.
* Protects backend services from being overwhelmed by excessive traffic or 
    potential denial-of-service(DoS) attacks.

e.g. allowing 100 requests per min per user.

3. Load Balancing : 
    High-traffic applications rely on load balancing to distribute incoming requests
    evenly across multiple instances of a service.

The API Gateway can - 
* Redirect requests to healthy service instances while avoiding ones that are down
    or overloaded.
* Use algorithms liek round-robin, least connections, or weighted distribution to 
    manage traffic intellligently.

4. Caching :
    To improve response time and reduce the strain on backend services, most API
    Gateways provide caching.

They temporarily store frequently requested data, such as -
 * Responses to commonly accessed endpoints (product catalogs or weather data)
 * Static resources like images or metadata.

- Caching helps in reducing latency and enhancing user experience while lowering
    the operational cost of backend services.

5. Request Transformation : 
    In systems with diverse clients and backend services, request transformation is
    essential for compatibility

An API Gateway can : 
* Modify the structure or format of incoming requests to match the backend service
    requirements.
* Transform responses before sending them back to the client, ensuring they meet the
    client's expectations.

For instance, it might convert XML responses from a legacy service into JSON for 
modern frontend applications.

6. Service Discovery :
Modern systems often involve microservices that scale dynamically.

The service discovery feature of an API Gateway dynamically identifies the appropriate 
backend service instance to handle each request.

this ensures seamless request routing even in environments where services 
frequently scale up or down.

7. Circuit Breaking : 
A mechanism that temporarily stops sending request to backend when it detects 
persistent failures, such as - 
- slow responses or timeouts
- Server errors(e.g. HTTP 500)
- High latency or unavailability of a service.

8. Logging and Monitoring :
API Gateways provide robust monitoring and logging capabilities to track and
analyze system behaviour.

capabilities include - 
1. Logging detailed info. about each request - source, destination and response time.
2. Collecting metrics like request rates, error rates, and latency.

- data helps system admins to detect anomalies, troubleshoot issues, and 
    optimize the system's performance. 
    ex - Prometheus, Grafana, or AWS CloudWatch.

3. How does an API Gateway work?

Step 1: Request Reception 

i.e. when you tap on "Place order" - 

 request includes - 
* Your user ID
* Selected restaurant and menu items.
* Delivery address
* Payment method
* Authentication tokens



API Gateway receives - the request as the single entry point.

Step 2 : Request Validation
Before forwarding the request, the API Gateway validates it to ensure -
* The required parameters or headers are present
* The data is in the correct format(e.g. JSON)
* The request conforms to the expected structure or schema.

If any information is missing or incorrect, the gateway immediately rejects the 
request and notifies the app with an appropriate error message.

Step 3: Authentication & Authorization 
It forwards your authentication token (e.g., OAuth or JWT) to an identity provider to confirm your identity.

It checks your permissions to ensure you’re authorized to use the app for placing an order.

const authenticateRequest = async (req) => {     
    // Extract JWT token from header     
    const token = req.headers.authorization?.split(' ')[1];          
    // Verify token and get user details     
    const user = await verifyToken(token);          
    // Check if user has permission to place orders     
    return user.permissions.includes('place_orders'); };

NOTE : If authentication or authorization fails, the API Gateway sends a 
        401 Unauthorized or 403 Forbidden error back to the app.

Step 4: Rate Limiting 
- If you’ve made 10 "Place Order" requests in the last minute (maybe by accident), 
the gateway might block additional requests temporarily and 
return 429 Too Many Requests response.

This ensures the system remains stable and fair for all users specially during 
traffic spikes or malicious attacks, such as distributed denial-of-service(DDoS) 
attempts.
const checkRateLimit = async (userId) => {     
    const key = `rate_limit:order:${userId}`;     
    const current = await redis.incr(key);          
    // If first request in window, set expiry     
    if (current === 1) {         
        await redis.expire(key, 60); // 1 minute window     
        }          
    return current <= 10; // Allow 10 order requests per minute };


Step 5: Request Transformation (if needed)

If any of these backend services require specific data formats or additional details, 
the API Gateway transforms the request.

For example -

Step 6: Request Routing

Step 7: Response Handling 
    * Transformation : Adjusts the response from 
    * Caching (Optional) : 

Step 8: Logging and Monitoring
const logRequest = 
    async (req, res, timing) => {     
        await logger.log({         
            timestamp: new Date(),         
            path: req.path,         
            method: req.method,         
            responseTime: timing,         
            statusCode: res.statusCode,         
            userId: req.user?.id     
        }); 
    };

